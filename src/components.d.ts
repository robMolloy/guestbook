/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface ButtonContainer {
    }
    interface DisplayPhotoGrid {
        "addImageDataUrls": (newImageDataUrls: string) => Promise<void>;
        "clearImageDataUrls": () => Promise<void>;
    }
    interface DisplayStream {
        "capture": () => Promise<string | undefined>;
        "countdown": (p: { start: number; stop: number; clear: boolean; }) => Promise<void>;
        "mediaDimensions": {
    videoElementWidth: number;
    videoElementHeight: number;
    mediaWidth: number;
    mediaHeight: number;
    aspectRatio: number;
  };
    }
    interface HalfScreenSection {
    }
    interface InitStreamSettings {
        "aspectRatio": number;
        "idealWidth": number;
    }
    interface RootComponent {
    }
    interface SmartGuestbookCaptureCycle {
    }
}
export interface DisplayPhotoGridCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDisplayPhotoGridElement;
}
export interface InitStreamSettingsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLInitStreamSettingsElement;
}
declare global {
    interface HTMLButtonContainerElement extends Components.ButtonContainer, HTMLStencilElement {
    }
    var HTMLButtonContainerElement: {
        prototype: HTMLButtonContainerElement;
        new (): HTMLButtonContainerElement;
    };
    interface HTMLDisplayPhotoGridElementEventMap {
        "selectPhoto": string;
    }
    interface HTMLDisplayPhotoGridElement extends Components.DisplayPhotoGrid, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDisplayPhotoGridElementEventMap>(type: K, listener: (this: HTMLDisplayPhotoGridElement, ev: DisplayPhotoGridCustomEvent<HTMLDisplayPhotoGridElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDisplayPhotoGridElementEventMap>(type: K, listener: (this: HTMLDisplayPhotoGridElement, ev: DisplayPhotoGridCustomEvent<HTMLDisplayPhotoGridElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDisplayPhotoGridElement: {
        prototype: HTMLDisplayPhotoGridElement;
        new (): HTMLDisplayPhotoGridElement;
    };
    interface HTMLDisplayStreamElement extends Components.DisplayStream, HTMLStencilElement {
    }
    var HTMLDisplayStreamElement: {
        prototype: HTMLDisplayStreamElement;
        new (): HTMLDisplayStreamElement;
    };
    interface HTMLHalfScreenSectionElement extends Components.HalfScreenSection, HTMLStencilElement {
    }
    var HTMLHalfScreenSectionElement: {
        prototype: HTMLHalfScreenSectionElement;
        new (): HTMLHalfScreenSectionElement;
    };
    interface HTMLInitStreamSettingsElementEventMap {
        "initSettingsError": string;
        "initSettingsComplete": {
    videoElementWidth: number;
    videoElementHeight: number;
    mediaWidth: number;
    mediaHeight: number;
    aspectRatio: number;
    imageDataUrlLength?: number;
  };
    }
    interface HTMLInitStreamSettingsElement extends Components.InitStreamSettings, HTMLStencilElement {
        addEventListener<K extends keyof HTMLInitStreamSettingsElementEventMap>(type: K, listener: (this: HTMLInitStreamSettingsElement, ev: InitStreamSettingsCustomEvent<HTMLInitStreamSettingsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLInitStreamSettingsElementEventMap>(type: K, listener: (this: HTMLInitStreamSettingsElement, ev: InitStreamSettingsCustomEvent<HTMLInitStreamSettingsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLInitStreamSettingsElement: {
        prototype: HTMLInitStreamSettingsElement;
        new (): HTMLInitStreamSettingsElement;
    };
    interface HTMLRootComponentElement extends Components.RootComponent, HTMLStencilElement {
    }
    var HTMLRootComponentElement: {
        prototype: HTMLRootComponentElement;
        new (): HTMLRootComponentElement;
    };
    interface HTMLSmartGuestbookCaptureCycleElement extends Components.SmartGuestbookCaptureCycle, HTMLStencilElement {
    }
    var HTMLSmartGuestbookCaptureCycleElement: {
        prototype: HTMLSmartGuestbookCaptureCycleElement;
        new (): HTMLSmartGuestbookCaptureCycleElement;
    };
    interface HTMLElementTagNameMap {
        "button-container": HTMLButtonContainerElement;
        "display-photo-grid": HTMLDisplayPhotoGridElement;
        "display-stream": HTMLDisplayStreamElement;
        "half-screen-section": HTMLHalfScreenSectionElement;
        "init-stream-settings": HTMLInitStreamSettingsElement;
        "root-component": HTMLRootComponentElement;
        "smart-guestbook-capture-cycle": HTMLSmartGuestbookCaptureCycleElement;
    }
}
declare namespace LocalJSX {
    interface ButtonContainer {
    }
    interface DisplayPhotoGrid {
        "onSelectPhoto"?: (event: DisplayPhotoGridCustomEvent<string>) => void;
    }
    interface DisplayStream {
        "mediaDimensions": {
    videoElementWidth: number;
    videoElementHeight: number;
    mediaWidth: number;
    mediaHeight: number;
    aspectRatio: number;
  };
    }
    interface HalfScreenSection {
    }
    interface InitStreamSettings {
        "aspectRatio": number;
        "idealWidth": number;
        "onInitSettingsComplete"?: (event: InitStreamSettingsCustomEvent<{
    videoElementWidth: number;
    videoElementHeight: number;
    mediaWidth: number;
    mediaHeight: number;
    aspectRatio: number;
    imageDataUrlLength?: number;
  }>) => void;
        "onInitSettingsError"?: (event: InitStreamSettingsCustomEvent<string>) => void;
    }
    interface RootComponent {
    }
    interface SmartGuestbookCaptureCycle {
    }
    interface IntrinsicElements {
        "button-container": ButtonContainer;
        "display-photo-grid": DisplayPhotoGrid;
        "display-stream": DisplayStream;
        "half-screen-section": HalfScreenSection;
        "init-stream-settings": InitStreamSettings;
        "root-component": RootComponent;
        "smart-guestbook-capture-cycle": SmartGuestbookCaptureCycle;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "button-container": LocalJSX.ButtonContainer & JSXBase.HTMLAttributes<HTMLButtonContainerElement>;
            "display-photo-grid": LocalJSX.DisplayPhotoGrid & JSXBase.HTMLAttributes<HTMLDisplayPhotoGridElement>;
            "display-stream": LocalJSX.DisplayStream & JSXBase.HTMLAttributes<HTMLDisplayStreamElement>;
            "half-screen-section": LocalJSX.HalfScreenSection & JSXBase.HTMLAttributes<HTMLHalfScreenSectionElement>;
            "init-stream-settings": LocalJSX.InitStreamSettings & JSXBase.HTMLAttributes<HTMLInitStreamSettingsElement>;
            "root-component": LocalJSX.RootComponent & JSXBase.HTMLAttributes<HTMLRootComponentElement>;
            "smart-guestbook-capture-cycle": LocalJSX.SmartGuestbookCaptureCycle & JSXBase.HTMLAttributes<HTMLSmartGuestbookCaptureCycleElement>;
        }
    }
}
