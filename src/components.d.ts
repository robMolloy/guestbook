/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { TSelectedImageDbEntry } from "./utils/firestoreUtils/index";
export { TSelectedImageDbEntry } from "./utils/firestoreUtils/index";
export namespace Components {
    interface ButtonContainer {
        "paddingX": number;
        "paddingY": number;
    }
    interface CaptureCycle {
    }
    interface CaptureCycleConfirmPhotoFailScreen {
        "error": string | undefined;
    }
    interface CaptureCycleConfirmPhotoSuccessScreen {
    }
    interface CaptureCycleDisplayPhotoGrid {
        "addImageDataUrls": (newImageDataUrls: string) => Promise<void>;
        "clearImageDataUrls": () => Promise<void>;
    }
    interface CaptureCycleDisplaySelectedPhoto {
        "selectedImageDataUrl"?: string;
    }
    interface CaptureCycleDisplayStream {
        "capture": () => Promise<string | undefined>;
        "countdown": (p: { start: number; stop: number; clear: boolean; delayInMs?: number | undefined; cb?: ((num: number) => Promise<any> | any) | undefined; }) => Promise<void>;
        "streamSettings": {
    videoElementWidth: number;
    videoElementHeight: number;
    mediaWidth: number;
    mediaHeight: number;
    aspectRatio: number;
  };
    }
    interface CaptureCycleGetStreamSettings {
        "aspectRatio": number;
        "idealWidth": number;
    }
    interface CreateNewEventForm {
    }
    interface CustomH1 {
    }
    interface CustomH2 {
    }
    interface CustomH3 {
    }
    interface DumbCaptureCycle {
        "streamSettings": {
    videoElementWidth: number;
    videoElementHeight: number;
    mediaWidth: number;
    mediaHeight: number;
    aspectRatio: number;
  };
    }
    interface EventForm {
    }
    interface EventList {
    }
    interface EventListOld {
    }
    interface EventsCard {
    }
    interface EventsScreen {
    }
    interface HalfScreenSection {
    }
    interface LoadingScreen {
    }
    interface ManageEvent {
    }
    interface ManageEventImageAccordian {
        "selectedImageDbEntry": TSelectedImageDbEntry;
    }
    interface NavBar {
    }
    interface RmAccordian {
        "color"?: TDaisyUiColors;
        "heading": string;
    }
    interface RmButton {
        "color"?: TDaisyUiColors;
    }
    interface RmCard {
        "heading"?: string;
    }
    interface RmLayout {
    }
    interface RmModalButton {
        "buttonColor"?: TDaisyUiColors;
        "buttonText": string;
    }
    interface RootComponent {
    }
    interface TestComp {
    }
    interface UserAuthCard {
    }
    interface UserAuthScreen {
    }
    interface UserCreateForm {
    }
    interface UserLoginForm {
    }
}
export interface CaptureCycleConfirmPhotoFailScreenCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCaptureCycleConfirmPhotoFailScreenElement;
}
export interface CaptureCycleConfirmPhotoSuccessScreenCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCaptureCycleConfirmPhotoSuccessScreenElement;
}
export interface CaptureCycleDisplayPhotoGridCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCaptureCycleDisplayPhotoGridElement;
}
export interface CaptureCycleGetStreamSettingsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCaptureCycleGetStreamSettingsElement;
}
export interface CreateNewEventFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCreateNewEventFormElement;
}
export interface UserCreateFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUserCreateFormElement;
}
export interface UserLoginFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUserLoginFormElement;
}
declare global {
    interface HTMLButtonContainerElement extends Components.ButtonContainer, HTMLStencilElement {
    }
    var HTMLButtonContainerElement: {
        prototype: HTMLButtonContainerElement;
        new (): HTMLButtonContainerElement;
    };
    interface HTMLCaptureCycleElement extends Components.CaptureCycle, HTMLStencilElement {
    }
    var HTMLCaptureCycleElement: {
        prototype: HTMLCaptureCycleElement;
        new (): HTMLCaptureCycleElement;
    };
    interface HTMLCaptureCycleConfirmPhotoFailScreenElementEventMap {
        "startAgainClick": any;
    }
    interface HTMLCaptureCycleConfirmPhotoFailScreenElement extends Components.CaptureCycleConfirmPhotoFailScreen, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCaptureCycleConfirmPhotoFailScreenElementEventMap>(type: K, listener: (this: HTMLCaptureCycleConfirmPhotoFailScreenElement, ev: CaptureCycleConfirmPhotoFailScreenCustomEvent<HTMLCaptureCycleConfirmPhotoFailScreenElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCaptureCycleConfirmPhotoFailScreenElementEventMap>(type: K, listener: (this: HTMLCaptureCycleConfirmPhotoFailScreenElement, ev: CaptureCycleConfirmPhotoFailScreenCustomEvent<HTMLCaptureCycleConfirmPhotoFailScreenElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCaptureCycleConfirmPhotoFailScreenElement: {
        prototype: HTMLCaptureCycleConfirmPhotoFailScreenElement;
        new (): HTMLCaptureCycleConfirmPhotoFailScreenElement;
    };
    interface HTMLCaptureCycleConfirmPhotoSuccessScreenElementEventMap {
        "startAgainClick": any;
    }
    interface HTMLCaptureCycleConfirmPhotoSuccessScreenElement extends Components.CaptureCycleConfirmPhotoSuccessScreen, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCaptureCycleConfirmPhotoSuccessScreenElementEventMap>(type: K, listener: (this: HTMLCaptureCycleConfirmPhotoSuccessScreenElement, ev: CaptureCycleConfirmPhotoSuccessScreenCustomEvent<HTMLCaptureCycleConfirmPhotoSuccessScreenElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCaptureCycleConfirmPhotoSuccessScreenElementEventMap>(type: K, listener: (this: HTMLCaptureCycleConfirmPhotoSuccessScreenElement, ev: CaptureCycleConfirmPhotoSuccessScreenCustomEvent<HTMLCaptureCycleConfirmPhotoSuccessScreenElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCaptureCycleConfirmPhotoSuccessScreenElement: {
        prototype: HTMLCaptureCycleConfirmPhotoSuccessScreenElement;
        new (): HTMLCaptureCycleConfirmPhotoSuccessScreenElement;
    };
    interface HTMLCaptureCycleDisplayPhotoGridElementEventMap {
        "selectPhoto": string;
    }
    interface HTMLCaptureCycleDisplayPhotoGridElement extends Components.CaptureCycleDisplayPhotoGrid, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCaptureCycleDisplayPhotoGridElementEventMap>(type: K, listener: (this: HTMLCaptureCycleDisplayPhotoGridElement, ev: CaptureCycleDisplayPhotoGridCustomEvent<HTMLCaptureCycleDisplayPhotoGridElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCaptureCycleDisplayPhotoGridElementEventMap>(type: K, listener: (this: HTMLCaptureCycleDisplayPhotoGridElement, ev: CaptureCycleDisplayPhotoGridCustomEvent<HTMLCaptureCycleDisplayPhotoGridElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCaptureCycleDisplayPhotoGridElement: {
        prototype: HTMLCaptureCycleDisplayPhotoGridElement;
        new (): HTMLCaptureCycleDisplayPhotoGridElement;
    };
    interface HTMLCaptureCycleDisplaySelectedPhotoElement extends Components.CaptureCycleDisplaySelectedPhoto, HTMLStencilElement {
    }
    var HTMLCaptureCycleDisplaySelectedPhotoElement: {
        prototype: HTMLCaptureCycleDisplaySelectedPhotoElement;
        new (): HTMLCaptureCycleDisplaySelectedPhotoElement;
    };
    interface HTMLCaptureCycleDisplayStreamElement extends Components.CaptureCycleDisplayStream, HTMLStencilElement {
    }
    var HTMLCaptureCycleDisplayStreamElement: {
        prototype: HTMLCaptureCycleDisplayStreamElement;
        new (): HTMLCaptureCycleDisplayStreamElement;
    };
    interface HTMLCaptureCycleGetStreamSettingsElementEventMap {
        "initSettingsError": string;
        "initSettingsComplete": {
    videoElementWidth: number;
    videoElementHeight: number;
    mediaWidth: number;
    mediaHeight: number;
    aspectRatio: number;
    imageDataUrlLength?: number;
  };
    }
    interface HTMLCaptureCycleGetStreamSettingsElement extends Components.CaptureCycleGetStreamSettings, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCaptureCycleGetStreamSettingsElementEventMap>(type: K, listener: (this: HTMLCaptureCycleGetStreamSettingsElement, ev: CaptureCycleGetStreamSettingsCustomEvent<HTMLCaptureCycleGetStreamSettingsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCaptureCycleGetStreamSettingsElementEventMap>(type: K, listener: (this: HTMLCaptureCycleGetStreamSettingsElement, ev: CaptureCycleGetStreamSettingsCustomEvent<HTMLCaptureCycleGetStreamSettingsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCaptureCycleGetStreamSettingsElement: {
        prototype: HTMLCaptureCycleGetStreamSettingsElement;
        new (): HTMLCaptureCycleGetStreamSettingsElement;
    };
    interface HTMLCreateNewEventFormElementEventMap {
        "createEventSuccess": any;
    }
    interface HTMLCreateNewEventFormElement extends Components.CreateNewEventForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCreateNewEventFormElementEventMap>(type: K, listener: (this: HTMLCreateNewEventFormElement, ev: CreateNewEventFormCustomEvent<HTMLCreateNewEventFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCreateNewEventFormElementEventMap>(type: K, listener: (this: HTMLCreateNewEventFormElement, ev: CreateNewEventFormCustomEvent<HTMLCreateNewEventFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCreateNewEventFormElement: {
        prototype: HTMLCreateNewEventFormElement;
        new (): HTMLCreateNewEventFormElement;
    };
    interface HTMLCustomH1Element extends Components.CustomH1, HTMLStencilElement {
    }
    var HTMLCustomH1Element: {
        prototype: HTMLCustomH1Element;
        new (): HTMLCustomH1Element;
    };
    interface HTMLCustomH2Element extends Components.CustomH2, HTMLStencilElement {
    }
    var HTMLCustomH2Element: {
        prototype: HTMLCustomH2Element;
        new (): HTMLCustomH2Element;
    };
    interface HTMLCustomH3Element extends Components.CustomH3, HTMLStencilElement {
    }
    var HTMLCustomH3Element: {
        prototype: HTMLCustomH3Element;
        new (): HTMLCustomH3Element;
    };
    interface HTMLDumbCaptureCycleElement extends Components.DumbCaptureCycle, HTMLStencilElement {
    }
    var HTMLDumbCaptureCycleElement: {
        prototype: HTMLDumbCaptureCycleElement;
        new (): HTMLDumbCaptureCycleElement;
    };
    interface HTMLEventFormElement extends Components.EventForm, HTMLStencilElement {
    }
    var HTMLEventFormElement: {
        prototype: HTMLEventFormElement;
        new (): HTMLEventFormElement;
    };
    interface HTMLEventListElement extends Components.EventList, HTMLStencilElement {
    }
    var HTMLEventListElement: {
        prototype: HTMLEventListElement;
        new (): HTMLEventListElement;
    };
    interface HTMLEventListOldElement extends Components.EventListOld, HTMLStencilElement {
    }
    var HTMLEventListOldElement: {
        prototype: HTMLEventListOldElement;
        new (): HTMLEventListOldElement;
    };
    interface HTMLEventsCardElement extends Components.EventsCard, HTMLStencilElement {
    }
    var HTMLEventsCardElement: {
        prototype: HTMLEventsCardElement;
        new (): HTMLEventsCardElement;
    };
    interface HTMLEventsScreenElement extends Components.EventsScreen, HTMLStencilElement {
    }
    var HTMLEventsScreenElement: {
        prototype: HTMLEventsScreenElement;
        new (): HTMLEventsScreenElement;
    };
    interface HTMLHalfScreenSectionElement extends Components.HalfScreenSection, HTMLStencilElement {
    }
    var HTMLHalfScreenSectionElement: {
        prototype: HTMLHalfScreenSectionElement;
        new (): HTMLHalfScreenSectionElement;
    };
    interface HTMLLoadingScreenElement extends Components.LoadingScreen, HTMLStencilElement {
    }
    var HTMLLoadingScreenElement: {
        prototype: HTMLLoadingScreenElement;
        new (): HTMLLoadingScreenElement;
    };
    interface HTMLManageEventElement extends Components.ManageEvent, HTMLStencilElement {
    }
    var HTMLManageEventElement: {
        prototype: HTMLManageEventElement;
        new (): HTMLManageEventElement;
    };
    interface HTMLManageEventImageAccordianElement extends Components.ManageEventImageAccordian, HTMLStencilElement {
    }
    var HTMLManageEventImageAccordianElement: {
        prototype: HTMLManageEventImageAccordianElement;
        new (): HTMLManageEventImageAccordianElement;
    };
    interface HTMLNavBarElement extends Components.NavBar, HTMLStencilElement {
    }
    var HTMLNavBarElement: {
        prototype: HTMLNavBarElement;
        new (): HTMLNavBarElement;
    };
    interface HTMLRmAccordianElement extends Components.RmAccordian, HTMLStencilElement {
    }
    var HTMLRmAccordianElement: {
        prototype: HTMLRmAccordianElement;
        new (): HTMLRmAccordianElement;
    };
    interface HTMLRmButtonElement extends Components.RmButton, HTMLStencilElement {
    }
    var HTMLRmButtonElement: {
        prototype: HTMLRmButtonElement;
        new (): HTMLRmButtonElement;
    };
    interface HTMLRmCardElement extends Components.RmCard, HTMLStencilElement {
    }
    var HTMLRmCardElement: {
        prototype: HTMLRmCardElement;
        new (): HTMLRmCardElement;
    };
    interface HTMLRmLayoutElement extends Components.RmLayout, HTMLStencilElement {
    }
    var HTMLRmLayoutElement: {
        prototype: HTMLRmLayoutElement;
        new (): HTMLRmLayoutElement;
    };
    interface HTMLRmModalButtonElement extends Components.RmModalButton, HTMLStencilElement {
    }
    var HTMLRmModalButtonElement: {
        prototype: HTMLRmModalButtonElement;
        new (): HTMLRmModalButtonElement;
    };
    interface HTMLRootComponentElement extends Components.RootComponent, HTMLStencilElement {
    }
    var HTMLRootComponentElement: {
        prototype: HTMLRootComponentElement;
        new (): HTMLRootComponentElement;
    };
    interface HTMLTestCompElement extends Components.TestComp, HTMLStencilElement {
    }
    var HTMLTestCompElement: {
        prototype: HTMLTestCompElement;
        new (): HTMLTestCompElement;
    };
    interface HTMLUserAuthCardElement extends Components.UserAuthCard, HTMLStencilElement {
    }
    var HTMLUserAuthCardElement: {
        prototype: HTMLUserAuthCardElement;
        new (): HTMLUserAuthCardElement;
    };
    interface HTMLUserAuthScreenElement extends Components.UserAuthScreen, HTMLStencilElement {
    }
    var HTMLUserAuthScreenElement: {
        prototype: HTMLUserAuthScreenElement;
        new (): HTMLUserAuthScreenElement;
    };
    interface HTMLUserCreateFormElementEventMap {
        "createUserSuccess": any;
        "createUserFail": any;
    }
    interface HTMLUserCreateFormElement extends Components.UserCreateForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUserCreateFormElementEventMap>(type: K, listener: (this: HTMLUserCreateFormElement, ev: UserCreateFormCustomEvent<HTMLUserCreateFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUserCreateFormElementEventMap>(type: K, listener: (this: HTMLUserCreateFormElement, ev: UserCreateFormCustomEvent<HTMLUserCreateFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUserCreateFormElement: {
        prototype: HTMLUserCreateFormElement;
        new (): HTMLUserCreateFormElement;
    };
    interface HTMLUserLoginFormElementEventMap {
        "loginSuccess": any;
        "loginFail": any;
    }
    interface HTMLUserLoginFormElement extends Components.UserLoginForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUserLoginFormElementEventMap>(type: K, listener: (this: HTMLUserLoginFormElement, ev: UserLoginFormCustomEvent<HTMLUserLoginFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUserLoginFormElementEventMap>(type: K, listener: (this: HTMLUserLoginFormElement, ev: UserLoginFormCustomEvent<HTMLUserLoginFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUserLoginFormElement: {
        prototype: HTMLUserLoginFormElement;
        new (): HTMLUserLoginFormElement;
    };
    interface HTMLElementTagNameMap {
        "button-container": HTMLButtonContainerElement;
        "capture-cycle": HTMLCaptureCycleElement;
        "capture-cycle-confirm-photo-fail-screen": HTMLCaptureCycleConfirmPhotoFailScreenElement;
        "capture-cycle-confirm-photo-success-screen": HTMLCaptureCycleConfirmPhotoSuccessScreenElement;
        "capture-cycle-display-photo-grid": HTMLCaptureCycleDisplayPhotoGridElement;
        "capture-cycle-display-selected-photo": HTMLCaptureCycleDisplaySelectedPhotoElement;
        "capture-cycle-display-stream": HTMLCaptureCycleDisplayStreamElement;
        "capture-cycle-get-stream-settings": HTMLCaptureCycleGetStreamSettingsElement;
        "create-new-event-form": HTMLCreateNewEventFormElement;
        "custom-h1": HTMLCustomH1Element;
        "custom-h2": HTMLCustomH2Element;
        "custom-h3": HTMLCustomH3Element;
        "dumb-capture-cycle": HTMLDumbCaptureCycleElement;
        "event-form": HTMLEventFormElement;
        "event-list": HTMLEventListElement;
        "event-list-old": HTMLEventListOldElement;
        "events-card": HTMLEventsCardElement;
        "events-screen": HTMLEventsScreenElement;
        "half-screen-section": HTMLHalfScreenSectionElement;
        "loading-screen": HTMLLoadingScreenElement;
        "manage-event": HTMLManageEventElement;
        "manage-event-image-accordian": HTMLManageEventImageAccordianElement;
        "nav-bar": HTMLNavBarElement;
        "rm-accordian": HTMLRmAccordianElement;
        "rm-button": HTMLRmButtonElement;
        "rm-card": HTMLRmCardElement;
        "rm-layout": HTMLRmLayoutElement;
        "rm-modal-button": HTMLRmModalButtonElement;
        "root-component": HTMLRootComponentElement;
        "test-comp": HTMLTestCompElement;
        "user-auth-card": HTMLUserAuthCardElement;
        "user-auth-screen": HTMLUserAuthScreenElement;
        "user-create-form": HTMLUserCreateFormElement;
        "user-login-form": HTMLUserLoginFormElement;
    }
}
declare namespace LocalJSX {
    interface ButtonContainer {
        "paddingX"?: number;
        "paddingY"?: number;
    }
    interface CaptureCycle {
    }
    interface CaptureCycleConfirmPhotoFailScreen {
        "error"?: string | undefined;
        "onStartAgainClick"?: (event: CaptureCycleConfirmPhotoFailScreenCustomEvent<any>) => void;
    }
    interface CaptureCycleConfirmPhotoSuccessScreen {
        "onStartAgainClick"?: (event: CaptureCycleConfirmPhotoSuccessScreenCustomEvent<any>) => void;
    }
    interface CaptureCycleDisplayPhotoGrid {
        "onSelectPhoto"?: (event: CaptureCycleDisplayPhotoGridCustomEvent<string>) => void;
    }
    interface CaptureCycleDisplaySelectedPhoto {
        "selectedImageDataUrl"?: string;
    }
    interface CaptureCycleDisplayStream {
        "streamSettings": {
    videoElementWidth: number;
    videoElementHeight: number;
    mediaWidth: number;
    mediaHeight: number;
    aspectRatio: number;
  };
    }
    interface CaptureCycleGetStreamSettings {
        "aspectRatio": number;
        "idealWidth": number;
        "onInitSettingsComplete"?: (event: CaptureCycleGetStreamSettingsCustomEvent<{
    videoElementWidth: number;
    videoElementHeight: number;
    mediaWidth: number;
    mediaHeight: number;
    aspectRatio: number;
    imageDataUrlLength?: number;
  }>) => void;
        "onInitSettingsError"?: (event: CaptureCycleGetStreamSettingsCustomEvent<string>) => void;
    }
    interface CreateNewEventForm {
        "onCreateEventSuccess"?: (event: CreateNewEventFormCustomEvent<any>) => void;
    }
    interface CustomH1 {
    }
    interface CustomH2 {
    }
    interface CustomH3 {
    }
    interface DumbCaptureCycle {
        "streamSettings": {
    videoElementWidth: number;
    videoElementHeight: number;
    mediaWidth: number;
    mediaHeight: number;
    aspectRatio: number;
  };
    }
    interface EventForm {
    }
    interface EventList {
    }
    interface EventListOld {
    }
    interface EventsCard {
    }
    interface EventsScreen {
    }
    interface HalfScreenSection {
    }
    interface LoadingScreen {
    }
    interface ManageEvent {
    }
    interface ManageEventImageAccordian {
        "selectedImageDbEntry": TSelectedImageDbEntry;
    }
    interface NavBar {
    }
    interface RmAccordian {
        "color"?: TDaisyUiColors;
        "heading": string;
    }
    interface RmButton {
        "color"?: TDaisyUiColors;
    }
    interface RmCard {
        "heading"?: string;
    }
    interface RmLayout {
    }
    interface RmModalButton {
        "buttonColor"?: TDaisyUiColors;
        "buttonText": string;
    }
    interface RootComponent {
    }
    interface TestComp {
    }
    interface UserAuthCard {
    }
    interface UserAuthScreen {
    }
    interface UserCreateForm {
        "onCreateUserFail"?: (event: UserCreateFormCustomEvent<any>) => void;
        "onCreateUserSuccess"?: (event: UserCreateFormCustomEvent<any>) => void;
    }
    interface UserLoginForm {
        "onLoginFail"?: (event: UserLoginFormCustomEvent<any>) => void;
        "onLoginSuccess"?: (event: UserLoginFormCustomEvent<any>) => void;
    }
    interface IntrinsicElements {
        "button-container": ButtonContainer;
        "capture-cycle": CaptureCycle;
        "capture-cycle-confirm-photo-fail-screen": CaptureCycleConfirmPhotoFailScreen;
        "capture-cycle-confirm-photo-success-screen": CaptureCycleConfirmPhotoSuccessScreen;
        "capture-cycle-display-photo-grid": CaptureCycleDisplayPhotoGrid;
        "capture-cycle-display-selected-photo": CaptureCycleDisplaySelectedPhoto;
        "capture-cycle-display-stream": CaptureCycleDisplayStream;
        "capture-cycle-get-stream-settings": CaptureCycleGetStreamSettings;
        "create-new-event-form": CreateNewEventForm;
        "custom-h1": CustomH1;
        "custom-h2": CustomH2;
        "custom-h3": CustomH3;
        "dumb-capture-cycle": DumbCaptureCycle;
        "event-form": EventForm;
        "event-list": EventList;
        "event-list-old": EventListOld;
        "events-card": EventsCard;
        "events-screen": EventsScreen;
        "half-screen-section": HalfScreenSection;
        "loading-screen": LoadingScreen;
        "manage-event": ManageEvent;
        "manage-event-image-accordian": ManageEventImageAccordian;
        "nav-bar": NavBar;
        "rm-accordian": RmAccordian;
        "rm-button": RmButton;
        "rm-card": RmCard;
        "rm-layout": RmLayout;
        "rm-modal-button": RmModalButton;
        "root-component": RootComponent;
        "test-comp": TestComp;
        "user-auth-card": UserAuthCard;
        "user-auth-screen": UserAuthScreen;
        "user-create-form": UserCreateForm;
        "user-login-form": UserLoginForm;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "button-container": LocalJSX.ButtonContainer & JSXBase.HTMLAttributes<HTMLButtonContainerElement>;
            "capture-cycle": LocalJSX.CaptureCycle & JSXBase.HTMLAttributes<HTMLCaptureCycleElement>;
            "capture-cycle-confirm-photo-fail-screen": LocalJSX.CaptureCycleConfirmPhotoFailScreen & JSXBase.HTMLAttributes<HTMLCaptureCycleConfirmPhotoFailScreenElement>;
            "capture-cycle-confirm-photo-success-screen": LocalJSX.CaptureCycleConfirmPhotoSuccessScreen & JSXBase.HTMLAttributes<HTMLCaptureCycleConfirmPhotoSuccessScreenElement>;
            "capture-cycle-display-photo-grid": LocalJSX.CaptureCycleDisplayPhotoGrid & JSXBase.HTMLAttributes<HTMLCaptureCycleDisplayPhotoGridElement>;
            "capture-cycle-display-selected-photo": LocalJSX.CaptureCycleDisplaySelectedPhoto & JSXBase.HTMLAttributes<HTMLCaptureCycleDisplaySelectedPhotoElement>;
            "capture-cycle-display-stream": LocalJSX.CaptureCycleDisplayStream & JSXBase.HTMLAttributes<HTMLCaptureCycleDisplayStreamElement>;
            "capture-cycle-get-stream-settings": LocalJSX.CaptureCycleGetStreamSettings & JSXBase.HTMLAttributes<HTMLCaptureCycleGetStreamSettingsElement>;
            "create-new-event-form": LocalJSX.CreateNewEventForm & JSXBase.HTMLAttributes<HTMLCreateNewEventFormElement>;
            "custom-h1": LocalJSX.CustomH1 & JSXBase.HTMLAttributes<HTMLCustomH1Element>;
            "custom-h2": LocalJSX.CustomH2 & JSXBase.HTMLAttributes<HTMLCustomH2Element>;
            "custom-h3": LocalJSX.CustomH3 & JSXBase.HTMLAttributes<HTMLCustomH3Element>;
            "dumb-capture-cycle": LocalJSX.DumbCaptureCycle & JSXBase.HTMLAttributes<HTMLDumbCaptureCycleElement>;
            "event-form": LocalJSX.EventForm & JSXBase.HTMLAttributes<HTMLEventFormElement>;
            "event-list": LocalJSX.EventList & JSXBase.HTMLAttributes<HTMLEventListElement>;
            "event-list-old": LocalJSX.EventListOld & JSXBase.HTMLAttributes<HTMLEventListOldElement>;
            "events-card": LocalJSX.EventsCard & JSXBase.HTMLAttributes<HTMLEventsCardElement>;
            "events-screen": LocalJSX.EventsScreen & JSXBase.HTMLAttributes<HTMLEventsScreenElement>;
            "half-screen-section": LocalJSX.HalfScreenSection & JSXBase.HTMLAttributes<HTMLHalfScreenSectionElement>;
            "loading-screen": LocalJSX.LoadingScreen & JSXBase.HTMLAttributes<HTMLLoadingScreenElement>;
            "manage-event": LocalJSX.ManageEvent & JSXBase.HTMLAttributes<HTMLManageEventElement>;
            "manage-event-image-accordian": LocalJSX.ManageEventImageAccordian & JSXBase.HTMLAttributes<HTMLManageEventImageAccordianElement>;
            "nav-bar": LocalJSX.NavBar & JSXBase.HTMLAttributes<HTMLNavBarElement>;
            "rm-accordian": LocalJSX.RmAccordian & JSXBase.HTMLAttributes<HTMLRmAccordianElement>;
            "rm-button": LocalJSX.RmButton & JSXBase.HTMLAttributes<HTMLRmButtonElement>;
            "rm-card": LocalJSX.RmCard & JSXBase.HTMLAttributes<HTMLRmCardElement>;
            "rm-layout": LocalJSX.RmLayout & JSXBase.HTMLAttributes<HTMLRmLayoutElement>;
            "rm-modal-button": LocalJSX.RmModalButton & JSXBase.HTMLAttributes<HTMLRmModalButtonElement>;
            "root-component": LocalJSX.RootComponent & JSXBase.HTMLAttributes<HTMLRootComponentElement>;
            "test-comp": LocalJSX.TestComp & JSXBase.HTMLAttributes<HTMLTestCompElement>;
            "user-auth-card": LocalJSX.UserAuthCard & JSXBase.HTMLAttributes<HTMLUserAuthCardElement>;
            "user-auth-screen": LocalJSX.UserAuthScreen & JSXBase.HTMLAttributes<HTMLUserAuthScreenElement>;
            "user-create-form": LocalJSX.UserCreateForm & JSXBase.HTMLAttributes<HTMLUserCreateFormElement>;
            "user-login-form": LocalJSX.UserLoginForm & JSXBase.HTMLAttributes<HTMLUserLoginFormElement>;
        }
    }
}
